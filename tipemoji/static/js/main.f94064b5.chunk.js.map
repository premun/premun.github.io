{"version":3,"sources":["serviceWorker.ts","components/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Phase","emojis","App","props","input","timer","tickInterval","lastBadGuessAt","state","phase","NotStarted","gameInfo","undefined","React","createRef","this","Finished","renderFinishedGame","Running","renderGame","onClick","startGame","bind","setState","emoji","Math","floor","random","length","startedAt","Date","setInterval","tick","clearInterval","stoppedAt","className","String","fromCodePoint","type","ref","onChange","guess","defaultValue","autoFocus","diff","getTimeDifference","time","formatTime","current","value","codePointAt","classList","add","setTimeout","remove","stopGame","innerText","newerDate","olderDate","getTime","ms","minutes","seconds","milliseconds","toString","padStart","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f94064b5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nenum Phase {\r\n    NotStarted,\r\n    Running,\r\n    Finished,\r\n}\r\n\r\nconst emojis: ReadonlyArray<number> = [\r\n    0x1F601,\r\n    0x1F602,\r\n    0x1F603,\r\n    0x1F604,\r\n    0x1F605,\r\n    0x1F606,\r\n    0x1F609,\r\n    0x1F60A,\r\n    0x1F60B,\r\n    0x1F60C,\r\n    0x1F60D,\r\n    0x1F60F,\r\n    0x1F612,\r\n    0x1F613,\r\n    0x1F614,\r\n    0x1F616,\r\n    0x1F618,\r\n    0x1F61A,\r\n    0x1F61C,\r\n    0x1F61D,\r\n    0x1F61E,\r\n    0x1F620,\r\n    0x1F621,\r\n    0x1F622,\r\n    0x1F623,\r\n    0x1F624,\r\n    0x1F625,\r\n    0x1F628,\r\n    0x1F629,\r\n    0x1F62A,\r\n    0x1F62B,\r\n    0x1F62D,\r\n    0x1F630,\r\n    0x1F631,\r\n    0x1F632,\r\n    0x1F633,\r\n    0x1F635,\r\n    0x1F637,\r\n    0x1F638,\r\n    0x1F639,\r\n    0x1F63A,\r\n    0x1F63B,\r\n    0x1F63C,\r\n    0x1F63D,\r\n    0x1F63E,\r\n    0x1F63F,\r\n    0x1F640,\r\n    0x1F645,\r\n    0x1F646,\r\n    0x1F647,\r\n    0x1F648,\r\n    0x1F649,\r\n    0x1F64A,\r\n    0x1F64B,\r\n    0x1F64C,\r\n    0x1F64D,\r\n    0x1F64E,\r\n    0x1F64F,\r\n];\r\n\r\ninterface IAppState\r\n{\r\n    phase: Phase;\r\n    gameInfo?: IGameInfo;\r\n}\r\n\r\ninterface IGameInfo\r\n{\r\n    emoji: number;\r\n    startedAt: Date;\r\n    stoppedAt?: Date;\r\n}\r\n\r\nexport default class App extends React.Component<{}, IAppState>\r\n{\r\n    private readonly input: React.RefObject<HTMLInputElement>;\r\n    private readonly timer: React.RefObject<HTMLDivElement>;\r\n    private tickInterval: number = 0;\r\n    private lastBadGuessAt?: Date;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            phase: Phase.NotStarted,\r\n            gameInfo: undefined,\r\n        };\r\n\r\n        this.input = React.createRef<HTMLInputElement>();\r\n        this.timer = React.createRef<HTMLDivElement>();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        switch (this.state.phase) {\r\n            case Phase.Finished:\r\n                return this.renderFinishedGame();\r\n            case Phase.Running:\r\n                return this.renderGame();\r\n            case Phase.NotStarted:\r\n                return (\r\n                <button onClick={ this.startGame.bind(this) }>\r\n                    Start\r\n                </button>);\r\n        }\r\n    }\r\n\r\n    private startGame(): void {\r\n        this.setState({\r\n            phase: Phase.Running,\r\n            gameInfo: {\r\n                emoji: emojis[Math.floor(Math.random() * emojis.length)],\r\n                startedAt: new Date(),\r\n            }\r\n        });\r\n\r\n        this.tickInterval = window.setInterval(this.tick.bind(this), 13);\r\n    }\r\n\r\n    private stopGame(): void {\r\n        window.clearInterval(this.tickInterval);\r\n        this.setState({\r\n            phase: Phase.Finished,\r\n            gameInfo: {\r\n                ...this.state.gameInfo!,\r\n                stoppedAt: new Date(),\r\n            }\r\n        });\r\n    }\r\n\r\n    private renderGame(): JSX.Element {\r\n        if (!this.state.gameInfo) {\r\n            return <div>Invalid game state</div>;\r\n        }\r\n\r\n        return (\r\n        <div className=\"game\">\r\n            <p>Find</p>\r\n            <div className=\"emoji\">{String.fromCodePoint(this.state.gameInfo.emoji)}</div>\r\n            <p>and type here</p>\r\n            <input type=\"text\"\r\n                   ref={ this.input }\r\n                   onChange={ this.guess.bind(this) }\r\n                   defaultValue=\"\"\r\n                   autoFocus={ true } />\r\n            <div className=\"time\" ref={ this.timer }>00:00:000</div>\r\n        </div>);\r\n    }\r\n\r\n    private renderFinishedGame(): JSX.Element {\r\n        if (!this.state.gameInfo?.stoppedAt) {\r\n            return <div>Invalid game state</div>;\r\n        }\r\n\r\n        var diff = App.getTimeDifference(this.state.gameInfo.stoppedAt, this.state.gameInfo.startedAt);\r\n        var time = App.formatTime(diff);\r\n\r\n        return (\r\n        <div className=\"results\">\r\n            <p>Your time</p>\r\n            <div className=\"time\">\r\n                { time }\r\n            </div>\r\n            <button onClick={ this.startGame.bind(this) }>\r\n                Play again\r\n            </button>\r\n        </div>);\r\n    }\r\n\r\n    private guess(): void {\r\n        var input = this.input.current;\r\n        if (!input || !this.state.gameInfo) {\r\n            return;\r\n        }\r\n\r\n        if (this.lastBadGuessAt && App.getTimeDifference(new Date(), this.lastBadGuessAt) < 1000) {\r\n            input.value = \"\";\r\n            return;\r\n        }\r\n\r\n        if (input.value.codePointAt(0) !== this.state.gameInfo.emoji) {\r\n            input.value = \"\";\r\n            input.classList.add(\"error\");\r\n            this.lastBadGuessAt = new Date();\r\n            window.setTimeout(() => this.input.current?.classList.remove(\"error\"), 1000);\r\n            return;\r\n        }\r\n\r\n        this.stopGame();\r\n    }\r\n\r\n    private tick(): void {\r\n        if (!this.timer.current || !this.state.gameInfo) {\r\n            return;\r\n        }\r\n\r\n        var diff = App.getTimeDifference(new Date(), this.state.gameInfo.startedAt);\r\n        this.timer.current.innerText = App.formatTime(diff);\r\n    }\r\n    \r\n    private static getTimeDifference(newerDate: Date, olderDate: Date): number {\r\n        return newerDate.getTime() - olderDate.getTime();\r\n    }\r\n\r\n    private static formatTime(ms: number): string {\r\n        var minutes = Math.floor(ms / 1000 / 60);\r\n        var seconds = Math.floor((ms / 1000) % 60);\r\n        var milliseconds = Math.floor(ms % 1000);\r\n\r\n        return minutes.toString().padStart(2, \"0\") + \":\" +\r\n            seconds.toString().padStart(2, \"0\") + \":\" +\r\n            milliseconds.toString().padStart(3, \"0\");\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}